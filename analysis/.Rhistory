y = "Average sequential log probabilities") +
scale_y_continuous(limits = c(-4.5, -4)) +
guides(color = guide_legend(title = "Continuation Type")) +  # Legend for color
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
if (save_plot == TRUE) {
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p,
width = 10,
height = 5,
dpi = 600,
filename = file.path(FIG_DIR, "mangen", paste0("average.", ext))
)
})
}
df_summary <- df_combined %>%
group_by(cont_target, cont_type, model_name) %>%
summarize(mean_avg_logprob = mean(avg_logprob, na.rm = TRUE), .groups = "drop")
p <- ggplot(df_combined, aes(x = cont_target, y = avg_logprob, color = cont_type)) +
geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
scale_y_continuous(limits = c(-4.5, -4)) +
guides(color = guide_legend(title = "Continuation Type")) +  # Legend for color
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
if (save_plot == TRUE) {
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p,
width = 10,
height = 10,
dpi = 600,
filename = file.path(FIG_DIR, "mangen", paste0("average.", ext))
)
})
}
View(df_combined)
unique(df_combined$model_name)
strsplit('test_hih', '_')
strsplit('test_hih', '_')[[1]][2]
df_combined <- df_combined %>%
mutate(model_name = strsplit(model_name, '_')[[1]][2])
unique(df_combined$model_name)
df_combined <- do.call(rbind, lapply(file_names, function(file) {
file_path <- file.path(RESULTS_DIR, file)
df <- read_csv(file_path, show_col_types = FALSE)
df$model_name <- sub("\\.csv$", "", file)
df # return dataframe
}))
df_combined <- df_combined %>%
mutate(model_name = sapply(strsplit(model_name, "_"), function(x) x[2]))
unique(df_combined$model_name)
df_combined <- do.call(rbind, lapply(file_names, function(file) {
file_path <- file.path(RESULTS_DIR, file)
df <- read_csv(file_path, show_col_types = FALSE)
df$model_name <- sub("\\.csv$", "", file)
df # return dataframe
}))
unique(df_combined$model_name)
strsplit("gpt2-large", "_")[[1]][2]
strsplit("gpt2-large", "_")[[1]]
strsplit("gpt2-large", "_")[[1]]
strsplit("gpt2-large", "_")[[1]][-1]
rev(strsplit("gpt2-large", "_")[[1]])
rev(strsplit("gpt2-large", "_")[[1]])[1]
rev(strsplit("EleutherAI_pythia-1.4b-deduped", "_")[[1]])[1]
df_combined <- do.call(rbind, lapply(file_names, function(file) {
file_path <- file.path(RESULTS_DIR, file)
df <- read_csv(file_path, show_col_types = FALSE)
df$model_name <- sub("\\.csv$", "", file)
df # return dataframe
}))
length(unique(df_combined$model_name))
# df_combined <- df_combined %>%
#   mutate(model_name = sapply(strsplit(model_name, "_"), function(x) x[2]))
df_combined <- df_combined %>%
mutate(model_name = rev(strsplit(model_name, "_")[[1]][1]))
length(unique(df_combined$model_name))
df_combined <- do.call(rbind, lapply(file_names, function(file) {
file_path <- file.path(RESULTS_DIR, file)
df <- read_csv(file_path, show_col_types = FALSE)
df$model_name <- sub("\\.csv$", "", file)
df # return dataframe
}))
df_combined <- df_combined %>%
mutate(model_name = sapply(strsplit(model_name, "_"), function(x) rev(x)[1]))
length(unique(df_combined$model_name))
length(unique(df_combined$model_name))
unique(df_combined$model_name)
strsplit("pythia-6.9b-deduped", "-")
strsplit("pythia-6.9b-deduped", "-")[[1]]
strsplit("pythia-6.9b-deduped", "-deduped")[[1]]
strsplit("pythia-6.9b-deduped", "-deduped")[[1]][1]
strsplit("distilgpt2", "-deduped")[[1]][1]
df_combined <- do.call(rbind, lapply(file_names, function(file) {
file_path <- file.path(RESULTS_DIR, file)
df <- read_csv(file_path, show_col_types = FALSE)
df$model_name <- sub("\\.csv$", "", file)
df # return dataframe
}))
df_combined <- do.call(rbind, lapply(file_names, function(file) {
file_path <- file.path(RESULTS_DIR, file)
df <- read_csv(file_path, show_col_types = FALSE)
df$model_name <- sub("\\.csv$", "", file)
df # return dataframe
}))
df_combined <- df_combined %>%
mutate(model_name = sapply(strsplit(model_name, "_"), function(x) rev(x)[1]))
df_combined <- df_combined %>%
mutate(model_name = sapply(strsplit(model_name, "-deduped"), function(x)[1]))
df_combined <- do.call(rbind, lapply(file_names, function(file) {
file_path <- file.path(RESULTS_DIR, file)
df <- read_csv(file_path, show_col_types = FALSE)
df$model_name <- sub("\\.csv$", "", file)
df # return dataframe
}))
df_combined <- df_combined %>%
mutate(model_name = sapply(strsplit(model_name, "_"), function(x) rev(x)[1]))
df_combined <- df_combined %>%
mutate(model_name = sapply(strsplit(model_name, "-deduped"), function(x) (x)[[1]][1]))
length(unique(df_combined$model_name))
unique(df_combined$model_name)
df_summary <- df_combined %>%
group_by(cont_target, cont_type, model_name) %>%
summarize(mean_avg_logprob = mean(avg_logprob, na.rm = TRUE), .groups = "drop")
p <- ggplot(df_combined, aes(x = cont_target, y = avg_logprob, color = cont_type)) +
geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
scale_y_continuous(limits = c(-4.5, -4)) +
guides(color = guide_legend(title = "Continuation Type")) +  # Legend for color
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
if (save_plot == TRUE) {
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p,
width = 10,
height = 10,
dpi = 600,
filename = file.path(FIG_DIR, "mangen", paste0("average.", ext))
)
})
}
df_summary <- df_combined %>%
group_by(cont_target, model_name) %>%
summarize(mean_avg_logprob = mean(avg_logprob, na.rm = TRUE), .groups = "drop")
View(df_summary)
df_summary <- df_combined %>%
group_by(cont_target, model_name) %>%
summarize(
mean_avg_logprob = mean(avg_logprob, na.rm = TRUE),
sd_avg_logprob = sd(avg_logprob, na.rm = TRUE),
n = n(),
ci_lower = mean_avg_logprob - 1.96 * (sd_avg_logprob / sqrt(n)),
ci_upper = mean_avg_logprob + 1.96 * (sd_avg_logprob / sqrt(n)),
.groups = "drop"
)
df_summary <- df_combined %>%
group_by(cont_target, model_name) %>%
summarize(
mean_avg_logprob = mean(avg_logprob, na.rm = TRUE),
sd_avg_logprob = sd(avg_logprob, na.rm = TRUE),
ci_lower = mean_avg_logprob - 1.96 * (sd_avg_logprob / sqrt(n)),
ci_upper = mean_avg_logprob + 1.96 * (sd_avg_logprob / sqrt(n)),
.groups = "drop"
)
df_summary <- df_combined %>%
group_by(cont_target, model_name) %>%
summarize(
mean_avg_logprob = mean(avg_logprob, na.rm = TRUE),
ci_lower = mean_avg_logprob - 1.96 * sd(avg_logprob, na.rm = TRUE) / sqrt(n()),
ci_upper = mean_avg_logprob + 1.96 * sd(avg_logprob, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
)
df_summary <- df_combined %>%
group_by(cont_target, model_name) %>%
summarize(
mean_avg_logprob = mean(avg_logprob, na.rm = TRUE),
ci_lower = mean_avg_logprob - 1.96 * sd(avg_logprob, na.rm = TRUE) / sqrt(n()),
ci_upper = mean_avg_logprob + 1.96 * sd(avg_logprob, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
)
p <- ggplot(df_summary, aes(x = cont_target, y = mean_avg_logprob, color = cont_type)) +
geom_boxplot(data = df_combined, position = position_dodge(width = 0.75), outlier.shape = NA) +
geom_point(position = position_dodge(width = 0.75), size = 3, shape = 16) +  # Dot for average
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), position = position_dodge(width = 0.75), width = 0.2) +  # Error bars
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
scale_y_continuous(limits = c(-4.5, -4)) +
guides(color = guide_legend(title = "Continuation Type")) +  # Legend for color
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
df_summary <- df_combined %>%
group_by(cont_target, model_name) %>%
summarize(
mean_avg_logprob = mean(avg_logprob, na.rm = TRUE),
ci_lower = mean_avg_logprob - 1.96 * sd(avg_logprob, na.rm = TRUE) / sqrt(n()),
ci_upper = mean_avg_logprob + 1.96 * sd(avg_logprob, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
)
p <- ggplot(df_summary, aes(x = cont_target, y = mean_avg_logprob)) +
geom_point(position = position_dodge(width = 0.75), size = 3, shape = 16) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper),
position = position_dodge(width = 0.75), width = 0.2) +
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
scale_y_continuous(limits = c(-4.5, -4)) +
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
if (save_plot == TRUE) {
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p,
width = 10,
height = 10,
dpi = 600,
filename = file.path(FIG_DIR, "mangen", paste0("average.", ext))
)
})
}
df_summary <- df_combined %>%
group_by(cont_target, model_name) %>%
summarize(
mean_avg_logprob = mean(avg_logprob, na.rm = TRUE),
ci_lower = mean_avg_logprob - 1.96 * sd(avg_logprob, na.rm = TRUE) / sqrt(n()),
ci_upper = mean_avg_logprob + 1.96 * sd(avg_logprob, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
)
p <- ggplot(df_summary, aes(x = cont_target, y = mean_avg_logprob)) +
geom_point(position = position_dodge(width = 0.75), size = 1, shape = 16) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper),
position = position_dodge(width = 0.75), width = 0.2) +
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
# scale_y_continuous(limits = c(-4.5, -4)) +
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
if (save_plot == TRUE) {
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p,
width = 10,
height = 10,
dpi = 600,
filename = file.path(FIG_DIR, "mangen", paste0("average.", ext))
)
})
}
df_summary <- df_combined %>%
group_by(cont_target, cont_type, model_name) %>%
summarize(mean_avg_logprob = mean(avg_logprob, na.rm = TRUE), .groups = "drop")
p <- ggplot(df_combined, aes(x = cont_target, y = avg_logprob, color = cont_type)) +
geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
scale_y_continuous(limits = c(-4.5, -4)) +
guides(color = guide_legend(title = "Continuation Type")) +  # Legend for color
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
if (save_plot == TRUE) {
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p,
width = 10,
height = 10,
dpi = 600,
filename = file.path(FIG_DIR, "mangen", paste0("average-cont_type.", ext))
)
})
}
rm(list=ls())
require(readr)
require(dplyr)
require(ggplot2)
require(RColorBrewer)
RESULTS_DIR <- file.path("..", "data", "results", "mangen")
FIG_DIR <- file.path("..", "analysis", "figures")
ifelse(!dir.exists(file.path(FIG_DIR, "mangen")),
dir.create(file.path(FIG_DIR, "mangen"), recursive = TRUE), FALSE)
save_plot = TRUE
file_names <- list.files(path = RESULTS_DIR, pattern = ".csv", full.names = FALSE)
df_combined <- do.call(rbind, lapply(file_names, function(file) {
file_path <- file.path(RESULTS_DIR, file)
df <- read_csv(file_path, show_col_types = FALSE)
df$model_name <- sub("\\.csv$", "", file)
df # return dataframe
}))
df_combined <- df_combined %>%
mutate(model_name = sapply(strsplit(model_name, "_"), function(x) rev(x)[1]))
df_combined <- df_combined %>%
mutate(model_name = sapply(strsplit(model_name, "-deduped"), function(x) (x)[[1]][1]))
length(unique(df_combined$model_name))
unique(df_combined$model_name)
rm(list=ls())
require(readr)
require(dplyr)
require(ggplot2)
require(RColorBrewer)
RESULTS_DIR <- file.path("..", "data", "results", "mangen")
FIG_DIR <- file.path("..", "analysis", "figures")
ifelse(!dir.exists(file.path(FIG_DIR, "mangen")),
dir.create(file.path(FIG_DIR, "mangen"), recursive = TRUE), FALSE)
file_names <- list.files(path = RESULTS_DIR, pattern = ".csv", full.names = FALSE)
save_plot = TRUE
df_combined <- do.call(rbind, lapply(file_names, function(file) {
file_path <- file.path(RESULTS_DIR, file)
df <- read_csv(file_path, show_col_types = FALSE)
df$model_name <- sub("\\.csv$", "", file)
df # return dataframe
}))
df_combined <- df_combined %>%
mutate(model_name = sapply(strsplit(model_name, "_"), function(x) rev(x)[1]))
df_combined <- df_combined %>%
mutate(model_name = sapply(strsplit(model_name, "-deduped"), function(x) (x)[[1]][1]))
length(unique(df_combined$model_name))
unique(df_combined$model_name)
df_summary <- df_combined %>%
group_by(cont_target, cont_type, model_name) %>%
summarize(mean_avg_logprob = mean(avg_logprob, na.rm = TRUE), .groups = "drop")
View(df_summary)
df_summary <- df_combined %>%
group_by(cont_target, cont_type, model_name) %>%
summarize(mean_avg_logprob = mean(avg_logprob, na.rm = TRUE), .groups = "drop")
View(df_combined)
df_summary <- df_combined %>%
group_by(cont_target, cont_type, model_name) %>%
summarize(mean_logprob = mean(logprob, na.rm = TRUE), .groups = "drop")
p <- ggplot(df_summary, aes(x = cont_target, y = mean_logprob, color = cont_type)) +
geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
scale_y_continuous(limits = c(-4.5, -4)) +
guides(color = guide_legend(title = "Continuation Type")) +  # Legend for color
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
if (save_plot == TRUE) {
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p,
width = 10,
height = 10,
dpi = 600,
filename = file.path(FIG_DIR, "mangen", paste0("average-cont_type.", ext))
)
})
}
df_summary <- df_combined %>%
group_by(cont_target, cont_type, model_name) %>%
summarize(mean_logprob = mean(logprob, na.rm = TRUE), .groups = "drop")
p <- ggplot(df_summary, aes(x = cont_target, y = mean_logprob, color = cont_type)) +
geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
# scale_y_continuous(limits = c(-4.5, -4)) +
guides(color = guide_legend(title = "Continuation Type")) +  # Legend for color
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
if (save_plot == TRUE) {
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p,
width = 10,
height = 10,
dpi = 600,
filename = file.path(FIG_DIR, "mangen", paste0("average-cont_type.", ext))
)
})
}
View(df_summary)
df_summary <- df_combined %>%
group_by(cont_target, cont_type, model_name) %>%
summarize(mean_logprob = mean(logprob, na.rm = TRUE), .groups = "drop")
p <- ggplot(df_combined, aes(x = cont_target, y = mean_logprob, color = cont_type)) +
geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
# scale_y_continuous(limits = c(-4.5, -4)) +
guides(color = guide_legend(title = "Continuation Type")) +  # Legend for color
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
df_summary <- df_combined %>%
group_by(cont_target, cont_type, model_name) %>%
summarize(mean_logprob = mean(logprob, na.rm = TRUE), .groups = "drop")
p <- ggplot(df_combined, aes(x = cont_target, y = logprob, color = cont_type)) +
geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
# scale_y_continuous(limits = c(-4.5, -4)) +
guides(color = guide_legend(title = "Continuation Type")) +  # Legend for color
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
if (save_plot == TRUE) {
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p,
width = 10,
height = 10,
dpi = 600,
filename = file.path(FIG_DIR, "mangen", paste0("average-cont_type.", ext))
)
})
}
df_summary <- df_combined %>%
group_by(cont_target, model_name) %>%
summarize(
mean_logprob = mean(logprob, na.rm = TRUE),
ci_lower = mean_logprob - 1.96 * sd(logprob, na.rm = TRUE) / sqrt(n()),
ci_upper = mean_logprob + 1.96 * sd(logprob, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
)
p <- ggplot(df_summary, aes(x = cont_target, y = mean_logprob)) +
geom_point(position = position_dodge(width = 0.75), size = 1, shape = 16) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper),
position = position_dodge(width = 0.75), width = 0.2) +
theme_minimal() +
facet_wrap(~ model_name, ncol = 5) +  # 5 columns, rows adjust automatically
labs(title = "Sequential log probabilities",
x = "Continuation target content",
y = "Average sequential log probabilities") +
# scale_y_continuous(limits = c(-4.5, -4)) +
scale_x_discrete(labels = c('mc' = 'main', 'arc' = 'appositive')) +
scale_color_brewer(palette = "Set2") +  # Use color instead of fill
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
print(p)
if (save_plot == TRUE) {
formats <- c("pdf", "svg")
lapply(formats, function(ext) {
ggsave(
plot = p,
width = 10,
height = 10,
dpi = 600,
filename = file.path(FIG_DIR, "mangen", paste0("average.", ext))
)
})
}
